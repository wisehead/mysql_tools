1.重要数据结构
static sb_operations_t lua_ops = {
   .init = sb_lua_op_init,
   .thread_init = sb_lua_op_thread_init,
   .thread_done = sb_lua_op_thread_done,
   .report_intermediate = db_report_intermediate,
   .report_cumulative = db_report_cumulative,
   .done = sb_lua_op_done
};

2.sb_load_lua

main
--sb_load_lua
----sb_lua_new_state
----read_cmdline_options
----func_available(gstate, PREPARE_FUNC))
----func_available(gstate, CLEANUP_FUNC)
----func_available(gstate, HELP_FUNC)
----sbtest.ops = lua_ops;
----func_available(gstate, THREAD_RUN_FUNC)
----sb_lua_hook_defined(gstate, REPORT_INTERMEDIATE_HOOK)
----sb_lua_hook_defined(gstate, REPORT_CUMULATIVE_HOOK)
----states = (lua_State **)calloc(sb_globals.threads, sizeof(lua_State *));
----sb_lua_done


3.main

main
--sb_options_init
--log_register
--register_tests
--parse_general_arguments
--sb_get_value_flag("help")
--sb_get_value_flag("version")
--init() || log_init() || sb_counters_init()
--find_test//built-in test ??
--sb_load_lua//!!!!!!!!!!!!!!!!!!!!!
--parse_test_arguments

--if (sb_lua_loaded() && sb_lua_custom_command_defined(sb_globals.cmdname))
    sb_lua_call_custom_command
--else if (!strcmp(sb_globals.cmdname, "help"))
		test->builtin_cmds.help()
--else if (!strcmp(sb_globals.cmdname, "prepare"))
		test->builtin_cmds.prepare()
--else if (!strcmp(sb_globals.cmdname, "cleanup"))
		rc = test->builtin_cmds.cleanup()
--else if (!strcmp(sb_globals.cmdname, "run"))
		rc = run_test(test) ? EXIT_FAILURE : EXIT_SUCCESS;


--sb_lua_done()
--db_done
--sb_counters_done
--sb_rand_done
--sb_thread_done


4.luaL_loadfile

sb_load_lua/sb_lua_op_thread_init/cmd_worker_thread/sb_lua_report_thread_init
--sb_lua_new_state
----luaL_loadfile

5.luaL_newstate

sb_lua_new_state
--luaL_newstate


6.luaL_openlibs

sb_lua_new_state
--luaL_openlibs

7.run_test

main
--run_test
----print_run_mode
----sb_thread_create(&report_thread...)
----sb_thread_create(&eventgen_thread...)
----sb_thread_create(&checkpoints_thread...)
----sb_thread_create_workers
----sb_barrier_wait(&worker_barrier)
----checkpoint(&stat);
----sb_barrier_wait(&report_barrier)
----sb_thread_join_workers
------worker_thread
--------sb_rand_thread_init
--------sb_lua_op_thread_run/thread_run
--------thread_run(备选)
----------sb_more_events
----------sb_event_start
----------sb_event_start
----------sb_event_stop
--------sb_lua_op_thread_run（主流程）
----------thread_run(sysbench.lua)
------------ffi.C.sb_more_events
------------ffi.C.sb_event_start
------------pcall(event, thread_id)
--------------event(insert.lua/update.lua/delete.lua/read.lua function event())
------------ffi.C.sb_event_stop(thread_id)



----sb_thread_cancel(report_thread) || sb_thread_join(report_thread, NULL)
----sb_thread_cancel(eventgen_thread) || sb_thread_join(eventgen_thread, NULL)
----sb_thread_cancel(checkpoints_thread) || sb_thread_join(checkpoints_thread, NULL)
----


8.oltp_insert.lua
event
--sysbench.rand.uniform
----ffi.C.sb_rand_uniform(a, b)
--sysbench.rand.default
----ffi.C.sb_rand_default(a, b)
--get_c_value
----sysbench.rand.string(c_value_template)
------ffi.new("uint8_t[?]", buflen)
------ffi.C.sb_rand_str
------ffi.string(buf, buflen)
--get_pad_value
----sysbench.rand.string(pad_value_template)
--con:query(string.format("INSERT INTO %s (id, k, c, pad) VALUES " .."(%d, %d, '%s', '%s')",table_name, i, k_val, c_val, pad_val)))
----drv = sysbench.sql.driver()//in function thread_init()
------sysbench.sql.driver
----con = drv:connect()
------driver_methods.connect
----query()
------connection_methods.query
--check_reconnect

9.prepare
main
--sb_load_lua
----sbtest.builtin_cmds.prepare = &sb_lua_cmd_prepare
--test->builtin_cmds.prepare
----sb_lua_cmd_prepare
------execute_command